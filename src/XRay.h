#ifndef _XRay_include_
#define _XRay_include_
# include "../../LibraryFiles/TypeDef.h"
# include "../../LibraryFiles/Structures.h"
# include "../../LibraryFiles/normalize.h"
# include "../../LibraryFiles/FormFactors.h"
# include "../../LibraryFiles/time.h"
# include "../../LibraryFiles/MemoryUsage.h"
# include "../../LibraryFiles/AtomUtils.h"
# include "../../LibraryFiles/MathStructures.h"
# include "../../LibraryFiles/MathUtils.h"
# include "../../LibraryFiles/VectorManip.h"
# include "../../LibraryFiles/IOUtils.h"
# include "molecularReplacement.h"
# include "XRayStruct.h"
# include "XRay.h"
# include "LatticeStruct.h"
# include "LatticeUtils.h"
void millerToQ(Real h, Real k, Real l, Real a, Real b, Real c, PosStruct &q);
void millerToQ(XRayStruct &xray, Matrix &cartToFrac);
void millerToQ(XRayStruct &xray, XRayParamStruct &params);
void millerToQ(XRayStruct &xray, Real a, Real b, Real c);
void millerToQ(XRayStruct &xray, LatticeStruct &lattice);
void calcIntensity(Vector &real, Vector &imag, Vector &intensity);
void calcIntensity(XRayStruct &xray);
void calcAmplitude(Vector &intensity, Vector &F);
void calcAmplitude(Vector &real, Vector &imag, Vector &F);
void calcAmplitude(Vector &intensity, Vector &real, Vector &imag, Vector &F);
void calcAmplitude(XRayStruct &xray);
void checkPhase(XRayStruct &xray);
void calcPhase(XRayStruct &xray);
void calcTotalFormFactor(Matrix &realMat, Matrix &imagMat, Vector &real, Vector &imag);
void calcTotalFormFactor(Array3D &realMat, Array3D &imagMat, Vector &real, Vector &imag);
void addExcludedScattering(XRayStruct &xray);
void calcTotalFormFactor(XRayStruct &xray);
void calcBlockFormFactor(Matrix &realIn, Matrix &imagIn, Vector &real, Vector &imag, int nunique);
void calcTotalTempSymFormFactor(XRayStruct &xray);
void printComponents(XRayStruct xray);
void convertToFractionalCoordinates(AtomStruct &Atom, VectorStruct &a, VectorStruct &b, VectorStruct &c);
Real scatteringFactor(Real a[][NumAtomTypes], Real b[][NumAtomTypes], Real c[], int atom, Real q);
Real scatteringFactorDer(Real h, Real k, Real l, Real a[][NumAtomTypes], Real b[][NumAtomTypes], int atom, Real unita, Real unitb, Real unitc, int index);
Real scatteringFactor(Real a[][NumAtomTypes], Real b[][NumAtomTypes], Real c[], int atom, PosStruct q);
Real scatteringFactor(int atom, Real q, Real scale);
void scatteringFactor(Matrix &f, vector<PosStruct> &q, Real scale);
void setExcludedVolumeRadii(Vector &excludedVolumeRadii);
Real gaussianScattering(Real r, Real density, Real q);
Real hardSphereScattering(Real r, Real density, Real q);
Real gaussianScatteringDer(Real r, Real density, Real h, Real k, Real l, Real a, Real b, Real c, int index);
Real calcMagnitude(PosStruct &q);
void calcQMagnitudes(XRayStruct &xray);
Real gaussianScattering(Real r, Real density, PosStruct q);
Real hardSphereScattering(Real r, Real density, PosStruct q);
void solventDummyAtomScatteringFactor(Matrix &g, vector<PosStruct> &q, Vector &excludedVolumeRadii, Real density);
void solventCorrectedScatteringFactor(Matrix &f, Matrix &g);
void solventCorrectedScatteringFactor(Matrix &f, vector<PosStruct> &q, Vector &excludedVolumeRadii, Real density, Real scale);
void solventCorrectedScatteringFactor(Matrix &f, vector<PosStruct> &q, XRayParamStruct &params);
Real solventCorrectedScatteringFactor(PosStruct &q, Real a[5][NumAtomTypes], Real b[5][NumAtomTypes], Real c[NumAtomTypes], int atom, Real excludedVolumeRadii, Real density);
Real solventCorrectedScatteringFactorDer(int h, int k, int l, Real a[5][NumAtomTypes], Real b[5][NumAtomTypes], int atom, Real excludedVolumeRadii, Real density, VectorStruct &unita, VectorStruct &unitb, VectorStruct &unitc, int index);
Real calcDWF(PosStruct &q, Real bfactor);
Real calcDWF(PosStruct &q, Vector &anisou);
Real calcDWF(PosStruct &q, AtomStruct &Atom);
Real calcDWF(PosStruct &q, Real bfactor, LookUpStruct &lookUp);
Real calcDWF(Real qMag, Real bfactor, LookUpStruct &lookUp);
Real calcDWF(PosStruct &q, Vector &anisou, LookUpStruct &lookUp);
Real calcDWF(PosStruct &q, AtomStruct &Atom, LookUpStruct &lookUp);
Real calcDWF(XRayStruct &xray, int index, AtomStruct &Atom, LookUpStruct &lookUp);
void calcScattering(ProteinStruct &Protein, XRayStruct &xray);
void calcScatteringBfactor(ProteinStruct &Protein, XRayStruct &xray);
void calcRealImag(ProteinStruct &Protein, XRayStruct &xray, Matrix &cosx, Matrix &cosy, Matrix &cosz, Matrix &sinx, Matrix &siny, Matrix &sinz);
void calcTrigForScattering(ProteinStruct &Protein, XRayStruct &xray);
void calcScatteringFast(ProteinStruct &Protein, XRayStruct &xray);
Real estimateXRayScore(ProteinStruct &referenceProtein, ProteinStruct &Protein, Matrix &derivative, Real oldScore);
Real estimateXRayScore(Vector dRot, EstimateScoreStruct args);
Real calcRotationalDerivative(vector<AtomStruct> &Atoms, int axis, Matrix &cartesian);
Real calcTranslationalDerivative(int axis, Matrix &cartesian);
Real calcDerivative(vector<AtomStruct> &Atoms, int angleType, int residue, Matrix &cartesian);
void calcAnalyticalRotationalGrad(ProteinStruct &Protein, XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params, Vector &derivative);
void calcFiniteDifferenceRotationDer(ProteinStruct &Protein, XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params, int axis, Real &derLower, Real &derUpper);
void calcRotationalDerivativeX(Real phi, Real theta, Real psi, Matrix &rotMat);
void calcRotationalDerivativeY(Real phi, Real theta, Real psi, Matrix &rotMat);
void calcRotationalDerivativeZ(Real phi, Real theta, Real psi, Matrix &rotMat);
void calcRotationalDerivative(ProteinStruct &Protein, Real phi, Real theta, Real psi, Matrix &gradient, Real &derrx, Real &derry, Real &derrz);
void checkRotationalGrad(ProteinStruct Protein, Real phi, Real psi, Real theta);
void calcAnalyticalRotationTranslationGrad(vector<ProteinStruct> &Proteins, XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params, Vector &degOfFreedom, Vector &derivative);
Real calcAnalyticalRotationTranslationGrad(Vector degOfFreedom, MRStruct gradArgs, Vector &derivative);
void cartesianToDihedralGradient(ProteinStruct &Protein, Matrix &derivative, Vector &dihedralDer);
void calcScatteringGradientP1(ProteinStruct &Protein, XRayStruct &xray, XRayStruct &expXRay, Matrix &derivative);
void calcScatteringGradient(ProteinStruct &Protein, XRayStruct &xray, XRayStruct &expXRay, Matrix &derivative);
void calcScatteringGradient_old(ProteinStruct &Protein, XRayStruct &xray, XRayStruct &expXRay, Matrix &derivative);
void calcScatteringComplex(vector<ProteinStruct> &Proteins, XRayStruct &xray, Vector &degOfFreedom);
void calcScatteringComplex(vector<ProteinStruct> &Proteins, XRayStruct &xray);
void calcMove(XRayStruct &xray, int nmove);
void calcFixed(XRayStruct &xray, int nmove);
void calcRotationMatrix(Matrix &rotationMatrix, Real theta, Real phi, Real psi);
bool isRedundantSpaceGroup(string spaceGroup);
bool isRedundantSpaceGroup(int spaceGroup);
void calcXRayScatteringChange(ProteinStruct &Protein, XRayStruct &xray, int pick, Vector &degOfFreedom, XRayParamStruct &params);
void rotateToFitUnitCell(ProteinStruct &Protein);
void rotateToFitUnitCell2(ProteinStruct &Protein);
void rotateToFitUnitCell3(ProteinStruct &Protein);
void getMinMaxFracCoordinates(ProteinStruct &Protein);
Real evaluateOrientation(ProteinStruct Protein, Real phi, Real psi, Real theta);
void findBestOrientation(ProteinStruct &Protein, Real &bestPhi, Real &bestPsi, Real &bestTheta);
void findBestOrientation(ProteinStruct &Protein);
void calcScatteringContinuous(ProteinStruct &Protein, XRayStruct &xray, Array3D &realContinuous, Array3D &imagContinuous, XRayParamStruct &params);
void placeProteinForFastTranslationRotation(ProteinStruct &Protein);
void calcPlaceProteinAndScatteringContinuous(ProteinStruct &Protein, XRayStruct &xray, Array3D &realContinious, Array3D &imagContinous, XRayParamStruct &params);
void calcScatteringContinuousSegments(ProteinStruct &Protein, XRayStruct &xray, XRayParamStruct &params);
void calcScatteringContinuousSegmentsFile(ProteinStruct &Protein, XRayStruct &xray, vector<int> &segmentStart, vector<int> &segmentEnd, XRayParamStruct &params);
void calcScatteringContinuousSegmentsFile(ProteinStruct &Protein, XRayStruct &xray, XRayParamStruct &params);
void calcScatteringContinuous(ProteinStruct &Protein, XRayStruct &xray, XRayParamStruct &params, Real h, Real k, Real l, Real &totalReal, Real &totalImag);
void calcScatteringContinousSegments(ProteinStruct &Protein, XRayStruct &xray, XRayParamStruct &params);
Real interpolate3DFast(Real millerX, Real millerY, Real millerZ, Array3D &y, vector<Real> &pos, Real invDX, Real invDY, Real invDZ);
Real interpolate3DFast(Real xd, Real yd, Real zd, Array3D &y);
void interpolate3DFast(Real millerX, Real millerY, Real millerZ, Array3D &real, Array3D &imag, Vector &hNew, Real invDX, Real invDY, Real invDZ, Real &realOut, Real &imagOut);
void interpolate3DVeryFast(Real millerX, Real millerY, Real millerZ, XRayStruct &xray, Vector &hNew, Real invDX, Real invDY, Real invDZ, Real &realOut, Real &imagOut, int hbin, int kbin, int lbin);
void interpolate3DVeryFast2(Real millerX, Real millerY, Real millerZ, XRayStruct &xray, Vector &hNew, Real invDX, Real invDY, Real invDZ, Real &realOut, Real &imagOut, int hbin, int kbin, int lbin);
void phaseAndInterpolate(XRayStruct &xray, Vector &hNew, Real invDX, Real invDY, Real invDZ, Real &realOut, Real &imagOut);
void calcFastTranslationRotation(SymmetryOperationStruct &symmetryOperation, Matrix &cartToFrac, Matrix &rotationMatrix, XRayStruct &xray, Vector &real, Vector &imag, XRayParamStruct &params, ProteinStruct &Protein);
void calcTransformedMiller(PosStruct &miller, Matrix &rotationMatrix, Matrix &cartToFrac, Matrix &fracToCart, Vector &hNew);
void findMaxMillerForFastRotation(XRayStruct &xray, Real theta, Real phi, Real psi, PosStruct &maxMiller, XRayParamStruct &params, int bestIndex);
void findMaxMillerForFastRotationSystematic(XRayStruct &xray, XRayParamStruct &params);
Real findMaxMillerForFastRotationAnalytical2(XRayStruct &xray, XRayParamStruct &params, int &bestIndex);
void findMaxMillerForFastRotationAnalytical(XRayStruct &xray, XRayParamStruct &params);
void findMaxMillerForFastRotation(XRayStruct &xray, XRayParamStruct &params);
void findIdenticalRotations(vector<SymmetryOperationStruct> &symOps, vector< vector<int> > &identicalRotations);
void calcFastTranslationRotation(ProteinStruct &Protein, XRayStruct &xray, Matrix &rotationMatrix, int prot, XRayParamStruct &params);
void zeroContinuousScattering(XRayStruct &xray);
void sumScatteringContinuousSegments(XRayStruct &xray, Vector &degOfFreedom, int start);
void millerToBin(XRayStruct &xray, Vector &hNew, Real invDX, Real invDY, Real invDZ, int &hbin, int &kbin, int &lbin);
void sumScatteringContinuousSegments(XRayStruct &xray, Vector &degOfFreedom, int start, int hbin, int kbin, int lbin);
void sumScatteringContinuousSegments(Array3D &continuous, const Array3D &continuousSegment, int hbin, int kbin, int lbin);
void sumScatteringContinuousSegments(XRayStruct &xray, Vector &degOfFreedom, int start, int hbin, int kbin, int lbin);
void sumScatteringContinuousSegments(XRayStruct &xray, Vector &degOfFreedom, vector<bool> &binary, int start, int hbin, int kbin, int lbin);
void sumScatteringContinuousSegments(XRayStruct &xray, Vector &degOfFreedom, int occupancyNum, int start, int hbin, int kbin, int lbin);
void subtractScatteringContinuousSegment(XRayStruct &xray, int pick, int hbin, int kbin, int lbin);
void addScatteringContinuousSegment(XRayStruct &xray, int pick, int hbin, int kbin, int lbin);
void subtractScatteringContinuousSegment(XRayStruct &xray, int pick, int occupancyNum, int hbin, int kbin, int lbin);
void addScatteringContinuousSegment(XRayStruct &xray, int pick, int occupancyNum, int hbin, int kbin, int lbin);
void sumScatteringContinuousSegments(XRayStruct &xray, Vector &degOfFreedom, int start, int hbin, int kbin, int lbin, Matrix &real, Matrix &imag);
void sumScatteringContinuousSegmentsUnrolled(XRayStruct &xray, Vector &degOfFreedom, int start, int h, int k, int l, Real real[8], Real imag[8], Matrix &realSegment, Matrix &imagSegment);
void makeOccupanciesNonZero(Vector &degOfFreedom, int start);
bool isDuplicate(vector<int> &v1, vector<int> &v2);
bool isDuplicate(vector<int> &v1, vector< vector<int> > &v2);
int calcOccupancyNum(Vector &degOfFreedom, int start);
void sumScatteringContinuousSegments(XRayStruct &xray, ProteinStruct &Protein, Vector &degOfFreedom, int start);
void resetUpdateContinuous(XRayStruct &xray, ProteinStruct &Protein, Vector &degOfFreedom);
void calcScatteringContinuousSegmentsChange(XRayStruct &xray, ProteinStruct &Protein, Vector &degOfFreedom, int start, int pick);
void calcFastTranslationRotation(vector<ProteinStruct> &Proteins, XRayStruct &xray, XRayParamStruct &params);
void translateXRay(LookUpStruct &lookUp, Vector &symReal, Vector &symImag, vector<PosStruct> &miller, Vector &frac, Vector &symTempReal, Vector &symTempImag);
void translateXRayDecomposed(XRayStruct &xray, Vector &symReal, Vector &symImag, vector<PosStruct> &miller, Vector &frac, Vector &symTempReal, Vector &symTempImag);
void translateXRayDecomposed2(XRayStruct &xray, Vector &symReal, Vector &symImag, vector<PosStruct> &miller, Vector &frac, Vector &symTempReal, Vector &symTempImag);
void translateXRayDecomposed3(XRayStruct &xray, Vector &symReal, Vector &symImag, vector<PosStruct> &miller, Vector &frac, Vector &symTempReal, Vector &symTempImag);
void translateXRayDecomposed4(XRayStruct &xray, Vector &symReal, Vector &symImag, vector<PosStruct> &miller, Vector &frac, Vector &symTempReal, Vector &symTempImag);
void translateXRayDecomposed5(XRayStruct &xray, Vector &symReal, Vector &symImag, vector<PosStruct> &miller, Vector &frac, Vector &symTempReal, Vector &symTempImag);
void calcSymmetryScattering(XRayStruct &xray, ProteinStruct &Protein, int prot);
void calcSymmetryScattering(XRayStruct &xray, vector<ProteinStruct> &Proteins);
void calcSymmetryScattering(XRayStruct &xray, ProteinStruct &Protein);
int identifyRotationBlocks(ProteinStruct &Protein);
void translateXRayBlock(XRayStruct &xray, ProteinStruct &Protein, Vector &dx, int prot, int nunique);
void translateXRayBlocks(ProteinStruct &Protein, XRayStruct &xray, int nunique, Vector &realBlock, Vector &imagBlock, Matrix &realTranslated, Matrix &imagTranslated);
void translateXRayVeryFast(XRayStruct &xray, ProteinStruct &Protein, Vector &dx, int prot);
void translateXRay2(XRayStruct &xray, ProteinStruct &Protein, Vector &dx, int prot);
void translateXRay(XRayStruct &xray, ProteinStruct &Protein, Vector &dx, int prot);
void trimProtein(ProteinStruct &Protein, XRayParamStruct &params);
void aveOverTrajectory(string dcdFilePaths, ProteinStruct &Protein, XRayStruct &xray, XRayParamStruct &params);
void bulkSolventXRay(XRayStruct &xray, XRayStruct &xraySol, Real ksol, Real bsol);
void bulkSolventCorrection(XRayStruct &xray, XRayStruct &xraySol, XRayStruct &xrayCorrected, Real ksol, Real bsol);
Real calcBulkSolventCorrectionScore(XRayStruct &xray, XRayStruct &expXRay, XRayStruct &xraySol, XRayStruct &xrayCorrected, Real ksol, Real bsol, XRayParamStruct &params);
Real calcBulkSolventCorrectionScore(Vector solCoefficients, SolventStruct args);
Real bulkSolventCorrection(XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params);
Real calcScattering(vector<ProteinStruct> &Proteins, XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params);
Real calcScattering(ProteinStruct &Protein, XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params);
Real calcScattering(Vector degOfFreedom, MRStruct args);
void setResidueOccupancyToZero(vector<AtomStruct> &Atoms, int residue);
void setSurfaceAtomsClashingWithCoreAtomsToZero(vector<AtomStruct> &Atoms);
void addAtomToScattering(AtomStruct &Atom, ProteinStruct &Protein, XRayStruct &xray);
void subtractAtomFromScattering(AtomStruct &Atom, ProteinStruct &Protein, XRayStruct &xray);
void optimizeOccupanciesOfClashingAtoms(vector<ProteinStruct> &Proteins, XRayStruct &xray, XRayStruct &expXRay, int atom1, int atom2, XRayParamStruct &params);
void optimizeOccupanciesOfClashingAtoms(vector<ProteinStruct> &Proteins, XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params);
void flexibleScattering(vector<ProteinStruct> &Proteins, XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params);
void flexibleScattering(ProteinStruct &Protein, XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params);
void calcTrigForScattering(LatticeStruct &lattice, XRayStruct &xray);
void calcRealImag(LatticeStruct &lattice, XRayStruct &xray);
void multiplyByParallelPipped(LatticeStruct &lattice, XRayStruct &xray);
void calcScatteringFast(LatticeStruct &lattice, XRayStruct &xray);
void calcScattering(LatticeStruct &lattice, XRayStruct &xray);
void calcScattering(vector<CubeStruct> &Cubes, XRayStruct &xray);
void getMaxMillerIndexes(vector<PosStruct> &miller, int &maxH, int &maxK, int &maxL);
void xray1Dto3D(XRayStruct &xray);
void delete3DXRay(XRayStruct &xray);
void calcScatteringFFT(LatticeStruct &lattice, XRayStruct &xray);
void copyXRaySize(XRayStruct &xray1, XRayStruct &xray2);
void addXRays(XRayStruct &xray1, XRayStruct &xray2);
void calcScatteringCubeProtein(ProteinStruct &Protein, vector<CubeStruct> &Cubes, XRayStruct &xray);
Real calcScatteringCubeProtein(ProteinStruct &Protein, vector<CubeStruct> &Cubes, XRayStruct &xray, XRayStruct &expXRay);
void combinePhaseAndIntensity(XRayStruct &xray, XRayStruct &expXRay, XRayStruct &combinedXRay);
void combinePhaseAndIntensityForExperiment(XRayStruct &xray, XRayStruct &expXRay, XRayStruct &combinedXRay);
void normalizeDensity(Array3D &density);
Real calcDensity(XRayStruct &xray, Real x, Real y, Real z);
void calcDensity(XRayStruct &xray, LatticeStruct &lattice);
void calcDensity(XRayStruct &xray, XRayStruct &expXRay, LatticeStruct &lattice);
void calcExperimentalDensity(XRayStruct &xray, XRayStruct &expXRay, LatticeStruct &lattice);
void calcDensity(ProteinStruct &Protein, XRayStruct &xray, LatticeStruct &lattice);
Real calcProteinDensityMatch(ProteinStruct &Protein, XRayStruct &xray, LatticeStruct &calcLattice, LatticeStruct &expLattice);
Real calcNativeDensityCorrelation(XRayStruct xray, LatticeStruct &lattice, ProteinStruct &Protein, XRayParamStruct &params);
void calcPatterson(XRayStruct &xray);
Real calcPattersonOverlap(PattersonStruct &calc, PattersonStruct &experiment);
Real calcPattersonOverlap(vector<ProteinStruct> &Proteins, XRayStruct &xray, XRayStruct &expXRay);
Real findMaxQ(vector<PosStruct> &q);
void calcExcludedScatteringSymmetry(ProteinStruct &Protein, XRayStruct &xray, LatticeStruct &lattice, XRayParamStruct &params);
void calcExcludedScattering(ProteinStruct &Protein, XRayStruct &xray, XRayParamStruct &params);
Real calcBFactorFix(XRayStruct &xray, XRayStruct &expXRay);
void applyBFactor(XRayStruct &xray, Real bfactor);
void fixBFactor(XRayStruct &xray, XRayStruct &expXRay);
void average1DIntensity(XRayStruct &xray, Real binSize, Vector &intensity, Vector &q, Vector &num);
void average1DIntensity(XRayStruct &xray, int maxBin, Vector &intensity, Vector &q);
void correctIntensity(XRayStruct &xray);
Real calcAveOccupancy(Vector &degOfFreedom, XRayParamStruct &params);
void correctOccupancyIntensity(XRayStruct &xray, Real aveOccupancy);
void correctOccupancyIntensity(XRayStruct &xray, Vector &degOfFreedom, XRayParamStruct &params);
void correctOccupancyIntensity(XRayStruct &xray, ProteinStruct &Protein, XRayParamStruct &params);
bool isSystematicAbsence(XRayStruct &xray, int index, ProteinStruct &Protein);
void removeSystematicAbsences(XRayStruct &xray, ProteinStruct &Protein);
void removeNegativeIntensity(XRayStruct &xray);
void removeNegativeMiller(XRayStruct &xray);
void compareAverageIntensities(XRayStruct &xray, XRayStruct &expXRay);
bool findCorrepondingPoint(PosStruct &expPos, XRayStruct &xray, int &xbin, int &ybin, int &zbin);
void setMaxMiller(XRayStruct &xray);
void setMinMiller(XRayStruct &xray);
void makeThreeDtoOneD(XRayStruct &xray, vector< vector< vector<int> > > &threeDtoOneD);
void findCorrespondingPoints(XRayStruct &xrayIn, XRayStruct &expXRay, XRayStruct &xrayOut, XRayStruct &expXRayOut);
bool isMatching(XRayStruct &xray1, XRayStruct &xray2);
void removeNonoverlapping(XRayStruct &xray, XRayStruct &expXRay);
void combineMillerIndexes(XRayStruct &xray, int index, vector<bool> &combine, XRayStruct &xrayOut);
void combineMillerIndexes(XRayStruct &xray);
Real calcRFactor(XRayStruct &xray, XRayStruct &expXRay, string xRayScoreType);
Real calcRFactor(XRayStruct &xray, XRayStruct &expXRay, XRayParamStruct &params);
Real calcExperimentalScaleFactor(XRayStruct &xray, XRayStruct &expXRay);
void filterOutHighResolution(XRayStruct &xray, int hmax, int kmax, int lmax);
void normalizeXRay(Vector &intensity);
void printSym(XRayStruct &xray);
void printXRayJV(string XRayOutput, XRayStruct &xray);
void convertISigmaToFSigma(XRayStruct &xray);
void printCifFile(string XRayOutput, XRayStruct &xray, ProteinStruct &Protein);
void printXRay(string XRayOutput, XRayStruct &xray, ProteinStruct &Protein);
#endif
